<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kadina&#39;s Blog</title>
    <url>/2021/03/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
<div align="right">
  Language:
  English
  <a title="Chinese" href="README_zh-CN.md">中文</a>
</div>

<p><a href="https://xpoet.cn"><img align="center" alt="Keep" lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/hexo-theme-keep/keep-logo-slogan.svg"></a></p>
<h1 id="hexo-theme-keep"><a href="#hexo-theme-keep" class="headerlink" title="hexo-theme-keep"></a>hexo-theme-keep</h1><p>«Keep» is a simple and elegant <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a> theme. It makes you more focused on writing.</p>
<p><a href="https://github.com/XPoet/hexo-theme-ils/blob/master/LICENSE"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/github/license/XPoet/hexo-theme-keep.svg?style=flat-square" alt="Github License" loading="lazy"></a><br><a href="https://github.com/XPoet/hexo-theme-ils/releases"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/github/release/XPoet/hexo-theme-keep.svg?style=flat-square" alt="Github Release" loading="lazy"></a><br><a href="https://www.npmjs.com/package/hexo-theme-keep"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/npm/v/hexo-theme-keep?color=red&logo=npm&style=flat-square" alt="NPM version" loading="lazy"></a><br><a href="https://hexo.io/"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/badge/hexo-%3E=5.0.0-blue?style=flat-square&logo=hexo" alt="Required Hexo version" loading="lazy"></a><br><a href="https://hexo.io/"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/badge/node-%3E=12.0-success.svg?style=flat-square&logo=Node.js&longCache=true" alt="Node.js Version" loading="lazy"></a><br><a href="https://www.jsdelivr.com/package/npm/hexo-theme-keep"><img lazyload src="/images/loading.svg" data-src="https://img.shields.io/jsdelivr/npm/hm/hexo-theme-keep?style=flat-square&logo=jsdelivr" alt="jsDelivr hits" loading="lazy"></a></p>
<h2 id="star2-Online-Preview"><a href="#star2-Online-Preview" class="headerlink" title=":star2: Online Preview"></a>:star2: Online Preview</h2><ul>
<li><strong><a class="link" href="https://xpoet.cn/">XPoet’s Blog<i class="fas fa-external-link-alt"></i></a></strong></li>
<li><strong><a class="link" href="https://keep.xpoet.cn/">keep official website<i class="fas fa-external-link-alt"></i></a></strong></li>
</ul>
<h2 id="rocket-Installation"><a href="#rocket-Installation" class="headerlink" title=":rocket: Installation"></a>:rocket: Installation</h2><p>If you’re using Hexo 5.0 or later, the simplest way to install is through npm:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm install hexo-theme-keep</span><br></pre></td></tr></table></figure>

<p>Or you can clone the entire repository:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure>

<p>After the installation, open Hexo config file and set <code>theme</code> variable to <code>keep</code>.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">keep</span></span><br></pre></td></tr></table></figure>

<h2 id="wrench-Usage"><a href="#wrench-Usage" class="headerlink" title=":wrench: Usage"></a>:wrench: Usage</h2><p>See docs: </p>
<ul>
<li><p><a class="link" href="https://keep.xpoet.cn/2020/04/Keep-%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">Keep theme usage guide<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p><a class="link" href="https://keep.xpoet.cn/2020/11/Keep-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/">Keep theme configuration guide<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<p>It is not recommended to directly modify any files in the «Keep» theme. Because this may cause errors (e.g. merge conflicts), and the modified files may be discarded when upgrading the theme.</p>
<h2 id="dart-Update"><a href="#dart-Update" class="headerlink" title=":dart: Update"></a>:dart: Update</h2><p>«Keep» releases new versions from time to time. You can update Keep by the following command.</p>
<p>Install the latest version throuth npm:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm update hexo-theme-keep</span><br></pre></td></tr></table></figure>

<p>Or update to latest master branch:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/keep</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h2 id="art-Contributing"><a href="#art-Contributing" class="headerlink" title=":art: Contributing"></a>:art: Contributing</h2><p>We welcome you to join the development of «Keep». Please see <a class="link" href="https://keep.xpoet.cn/2020/11/Keep-%E4%BB%A3%E7%A0%81%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97/">contributing guide<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="clapper-Contributors"><a href="#clapper-Contributors" class="headerlink" title=":clapper: Contributors"></a>:clapper: Contributors</h2><p>This project exists thanks to all the people who contribute.</p>
<a href="https://github.com/XPoet/hexo-theme-keep/graphs/contributors">
  <img lazyload src="/images/loading.svg" data-src="https://opencollective.com/hexo-theme-keep/contributors.svg?width=880">
</a>

<h2 id="sparkling-heart-Thanks"><a href="#sparkling-heart-Thanks" class="headerlink" title=":sparkling_heart: Thanks"></a>:sparkling_heart: Thanks</h2><p>«Keep» send special thanks to these great services that sponsor our core infrastructure:</p>
<p><a href="https://github.com"><img height="38" lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/hexo-theme-keep/GitHub-LOGO.5sq0168mirg0.png"></a></p>
<blockquote>
<p>GitHub allows us to host the Git repository and run the test suite.</p>
</blockquote>
<p><a href="https://www.jsdelivr.com"><img height="38" lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/hexo-theme-keep/jsDelivr-LOGO.png"></a></p>
<blockquote>
<p>Thanks jsDelivr for providing public CDN service.</p>
</blockquote>
<h2 id="memo-License"><a href="#memo-License" class="headerlink" title=":memo: License"></a>:memo: License</h2><p><a class="link" href="https://github.com/XPoet/picx/blob/master/LICENSE">MIT<i class="fas fa-external-link-alt"></i></a> Copyright © 2020 XPoet</p>
]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 前置知识（一）</title>
    <url>/2021/03/15/2021-03-15%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<p>函数式编程与命令式编程最大的不同其实在于：</p>
<p>函数式编程关心数据的映射，命令式编程关心解决问题的步骤。<br>这里的映射就是数学上「函数」的概念——自变量的映射，一种东西和另一种东西之间的对应关系。<br>这也是为什么「函数式编程」叫做「函数」式编程。</p>
<h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><ul>
<li><strong>为什么要学习函数式编程</strong> </li>
<li><strong>什么是函数式编程</strong> </li>
<li><strong>函数式编程的应用场景</strong> </li>
<li><strong>函数式编程库Lodash</strong> </li>
</ul>
<h2 id="为什么要学习函数式编程"><a href="#为什么要学习函数式编程" class="headerlink" title="为什么要学习函数式编程"></a>为什么要学习函数式编程</h2><p>函数式编程是一种非常古老的概念，早于第一台计算机的诞生。</p>
<p>那我们为什么现在还要学函数式编程？</p>
<ul>
<li>函数式编程是随着React的流行受到越来越多的关注（React中的高阶函数使用高阶组件来实现，React生态 Redux使用了函数式编程的思想。）</li>
<li>Vue 3也开始拥抱函数式编程（Vue重构趋向于函数式编程）</li>
<li>函数式编程可以抛弃this</li>
<li>打包过程中可以更好的利用tree shaking过滤无用代码</li>
<li>方便测试，方便并行处理</li>
<li>有很多库可以帮助我们进行函数式开发：lodash、underscore、ramda</li>
</ul>
<h2 id="函数式编程概念（什么是函数式编程）"><a href="#函数式编程概念（什么是函数式编程）" class="headerlink" title="函数式编程概念（什么是函数式编程）"></a>函数式编程概念（什么是函数式编程）</h2><p>函数式编程(Functional Programming, FP)，FP是编程范式之一，我们常听说的编程范式还有面向过程编程、面向对象编程。</p>
<ul>
<li>面向对象编程的思维方式： 把现实世界中的事物抽象成程序世界中的类和对象，通过封装、继承和多态来演示事物事件的联系</li>
<li>函数式编程的思维方式：把现实世界的事物和事物之间的<strong>联系</strong>抽象到程序世界（对运算过程进行抽象）<ul>
<li>程序的本质：根据输入通过某种运算获得相应的输出，程序开发过程中会涉及很多有输入和输出的函数</li>
<li>x-&gt;f(联系、映射)-&gt;y，y=f(x)</li>
<li><strong>函数式编程中函数指的不是程序中的函数（方法）</strong>，而是数学中的函数即映射关系，例如**y=sin(x)**，x和y的关系</li>
<li><strong>相同的输入始终要得到相同的输出</strong>（纯函数）</li>
<li>函数式编程用来描述数据（函数）之间的映射</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非函数式</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> sum = num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 前置知识（二）</title>
    <url>/2021/03/18/2021-03-18%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<p>一等公民的概念没有明确定义</p>
<p>在编程语言中，一等公民可以作为函数参数，可以作为函数返回值，也可以赋值给变量。</p>
<p>对于 JavaScript 来说，函数可以赋值给变量，也可以作为函数参数，还可以作为函数返回值，因此 JavaScript 中函数是一等公民。</p>
<p>别的能做的，函数都能做，别的不能做的，函数也能做。</p>
<p>函数为第一公民是函数式编程的必要条件。higher-order functions，即高阶函数，就是使用函数作为参数的函数，它在函数式编程中很常见</p>
<br>

<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul>
<li><strong>函数是一等公民</strong> </li>
<li><strong>高阶函数</strong> </li>
<li><strong>闭包</strong><br></li>
</ul>
<h2 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h2><p><u>MDN First-class Function</u></p>
<ul>
<li><strong>函数可以存储在变量中</strong> </li>
<li><strong>函数作为参数</strong> </li>
<li><strong>函数作为返回值</strong></li>
</ul>
<p>在JavaScript中<strong>函数就是一个普通的对象</strong>（可以通过new Function()），我们可以把函数存储到变量/数组中，它还可以作为另一个函数的参数和返回值，甚至我们可以在程序运行的时候通过new Function(‘alert(1)’)来构造一个新的函数。</p>
<br>

<h3 id="把函数赋值给变量"><a href="#把函数赋值给变量" class="headerlink" title="把函数赋值给变量"></a>把函数赋值给变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把函数赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello First-class Function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个示例</span></span><br><span class="line"><span class="keyword">const</span> BlogController = &#123;</span><br><span class="line">  <span class="function"><span class="title">index</span>(<span class="params">posts</span>)</span>&#123; <span class="keyword">return</span> Views.index(posts) &#125;,<span class="comment">//增强写法</span></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params">post</span>)</span>&#123; <span class="keyword">return</span> Views.show(post) &#125;,</span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params">attrs</span>)</span>&#123; <span class="keyword">return</span> Db.create(attrs) &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="keyword">const</span> BlogController = &#123;</span><br><span class="line">  index: Views.index,</span><br><span class="line">  show: Views.show，</span><br><span class="line">  create: Db.create</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="高阶函数-函数作为参数"><a href="#高阶函数-函数作为参数" class="headerlink" title="高阶函数-函数作为参数"></a>高阶函数-函数作为参数</h3><h4 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h4><ul>
<li>高阶函数（High-order function）react中的高阶组件（High-order component）本质就是高阶函数</li>
<li>可以把函数作为参数传递给例外一个函数</li>
<li>可以把函数作为另一个函数的返回结果</li>
</ul>
<br>

<h5 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h5><br>

<h6 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a><strong>forEach</strong></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高阶函数-函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreEach</span> (<span class="params">arr, fu</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    fn(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">forEach(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<br>

<h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a><strong>filter</strong></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filter会产生一个新的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span> (<span class="params">arr, fu</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fn(arr[i]))&#123;</span><br><span class="line">      result.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = filter(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item%<span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res)<span class="comment">//[4, 8]</span></span><br></pre></td></tr></table></figure>
<br>

<h5 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello Function&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = makeFn()</span><br><span class="line"></span><br><span class="line">fn()<span class="comment">//Hello Function</span></span><br><span class="line"></span><br><span class="line">makeFn()()</span><br></pre></td></tr></table></figure>
<br>

<h6 id="once"><a href="#once" class="headerlink" title="once"></a><strong>once</strong></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数只被执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> done = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">      done = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> pay = once(<span class="function"><span class="keyword">function</span>(<span class="params">money</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`支付了：<span class="subst">$&#123;money&#125;</span>RMB`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pay(<span class="number">5</span>)<span class="comment">//支付了：5RMB</span></span><br><span class="line">pay(<span class="number">5</span>)</span><br><span class="line">pay(<span class="number">5</span>)</span><br><span class="line">pay(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="使用高阶函数的意义"><a href="#使用高阶函数的意义" class="headerlink" title="使用高阶函数的意义"></a>使用高阶函数的意义</h4><ul>
<li>抽象可以帮我们屏蔽细节，只需要关注我们的目标</li>
<li>高阶函数是用来抽象通用的问题<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面向过程的方式</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;arr.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高阶函数</span></span><br><span class="line">forEach(arr, <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = filter(arr, <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 前置知识（三）</title>
    <url>/2021/03/20/2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="常用的高阶函数"><a href="#常用的高阶函数" class="headerlink" title="常用的高阶函数"></a>常用的高阶函数</h1><ul>
<li><strong>forEach</strong> </li>
<li><strong>map</strong> </li>
<li><strong>filter</strong></li>
<li><strong>every</strong></li>
<li><strong>some</strong></li>
<li><strong>find/findIndex</strong></li>
<li><strong>reduce</strong></li>
<li><strong>sort</strong></li>
<li>……<br></li>
</ul>
<h2 id="本篇模拟了常用的几个高阶函数"><a href="#本篇模拟了常用的几个高阶函数" class="headerlink" title="本篇模拟了常用的几个高阶函数"></a>本篇模拟了常用的几个高阶函数</h2><p>高阶函数都需要函数作为参数，这样使函数更加灵活，其实就是抽象通用的问题</p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成一个新的数组</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    result.push(fn(val))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">//箭头函数不带括号时，会自动默认return</span></span><br><span class="line">arr = map(arr, <span class="function"><span class="params">val</span> =&gt;</span> val * val)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断数组中每个元素是否匹配条件</span></span><br><span class="line"><span class="keyword">const</span> every = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!fn(val))&#123;</span><br><span class="line">      res = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr = every(arr, <span class="function"><span class="params">val</span> =&gt;</span> val % <span class="number">2</span> ==<span class="number">0</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断数组中是否有元素匹配条件</span></span><br><span class="line"><span class="keyword">const</span> some = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!fn(val))&#123;</span><br><span class="line">      res = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr = some(arr, <span class="function"><span class="params">val</span> =&gt;</span> val % <span class="number">2</span> ==<span class="number">0</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 闭包</title>
    <url>/2021/03/21/2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>函数定义和函数表达式位于另一个函数的函数体内。而且，这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。</p>
<p>闭包的本质：函数在执行的时候会放到一个执行栈上当函数执行完毕之后会从执行栈上移除，<strong>但是堆上的作用域成员因为被外部引用不能释放</strong>，因此内部函数依然可以访问外部函数的成员</p>
<ul>
<li><strong>闭包（Closure）：函数和其周围的状态（此法环境）的引用捆绑在一起形成闭包</strong> <ul>
<li><strong>可以在另一作用域中调用一个函数的内部函数并访问到该函数的作用域中的成员</strong> </li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello Function&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeFn1();<span class="comment">//调用完成后msg被释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello Function&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//内部有函数并访问了外部函数的成员</span></span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = makeFn2()<span class="comment">//fn引用了makeFn2中的函数，外部对内部有引用，使其不能被释放</span></span><br><span class="line">fn()<span class="comment">//延长了外部函数内部成员的作用范围</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePower</span> (<span class="params">power</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(number, power)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求平方</span></span><br><span class="line"><span class="keyword">let</span> power2 = makePower(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> power3 = makePower(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(power3(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<br>

<h3 id="断点查看执行过程"><a href="#断点查看执行过程" class="headerlink" title="断点查看执行过程"></a>断点查看执行过程</h3><p><img lazyload src="/images/loading.svg" data-src="2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/closure1.png" alt="开始" loading="lazy"></p>
<p><img lazyload src="/images/loading.svg" data-src="2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/closure2.png" alt="执行中" loading="lazy"></p>
<p><img lazyload src="/images/loading.svg" data-src="2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/closure3.png" alt="结束" loading="lazy"><br><br></p>
<p><strong>let作用域在script中，而var定义的对象会挂载在全局对象上</strong><br>闭包相关的外部函数是makePower<br>在内存中，外部函数被移除，相关的变量被保留<br><img lazyload src="/images/loading.svg" data-src="2021-03-20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/closure4.png" alt="闭包" loading="lazy"></p>
]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 纯函数</title>
    <url>/2021/03/21/2021-03-21%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E7%BA%AF%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h1><br>

<h2 id="纯函数的概念"><a href="#纯函数的概念" class="headerlink" title="纯函数的概念"></a>纯函数的概念</h2><ul>
<li><strong>函数的返回结果只依赖于它的参数</strong></li>
<li><strong>函数执行过程里面没有副作用</strong></li>
</ul>
<p>纯函数对相同的输入始终有相同的输出</p>
<p>lodash是一个纯函数的功能库，提供了对数组、数字、对象、字符串、函数等操作的一些方法</p>
<p>总结</p>
<ul>
<li>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</li>
<li>这是一种对函数的缓存</li>
<li>让函数变得更灵活，让函数的粒度更小</li>
<li>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li>
</ul>
<p>数组中的slice和splice分别是：纯函数和不纯函数</p>
<ul>
<li>slice返回数组中的指定部分</li>
<li>splice对数组进行操作，并返回该数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">//改变了arr，下次取的结果不一致，所以不是纯函数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">makeFn1();<span class="comment">//调用完成后msg被释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello Function&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//内部有函数并访问了外部函数的成员</span></span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = makeFn2()<span class="comment">//fn引用了makeFn2中的函数，外部对内部有引用，使其不能被释放</span></span><br><span class="line">fn()<span class="comment">//延长了外部函数内部成员的作用范围</span></span><br></pre></td></tr></table></figure>
<br>

<ul>
<li>函数式编程不会保留计算中间的状态，所以变量式不可变的（无状态的）</li>
<li>我们可以把一个函数的执行结果交给另一个函数去处理</li>
</ul>
<br>

<h3 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h3><p>除了ES5,ES6新增的功能之外，还提供了函数的柯里化，函数的组合等方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//演示lodash</span></span><br><span class="line"><span class="comment">//first / last /toUpper / reverse / each / includes / find / findIndex</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;kate&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_.first(arr))<span class="comment">//jack</span></span><br><span class="line"><span class="built_in">console</span>.log(_.last(arr))<span class="comment">//kate</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_toUpper(_.last(arr)))<span class="comment">//KATE</span></span><br><span class="line"></span><br><span class="line">arr.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_.reverse(arr))<span class="comment">//改变了原数组 [&#x27;kate&#x27;, &#x27;lucy&#x27;, &#x27;tom&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"></span><br><span class="line">_.each(arr， (item, index) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item. index)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  kate 0</span></span><br><span class="line"><span class="comment">  lucy 1</span></span><br><span class="line"><span class="comment">  tom 2</span></span><br><span class="line"><span class="comment">  jack 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="纯函数的优点"><a href="#纯函数的优点" class="headerlink" title="纯函数的优点"></a>纯函数的优点</h3><br>

<h4 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h4><p> 因为纯函数对相同的输入始终有相同的输出，所以可以把纯函数的结果缓存起来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>  (<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * r * r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记忆函数</span></span><br><span class="line"><span class="keyword">let</span> getAreaWithMemory = _.memoize(getArea)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))<span class="comment">//4 50.26</span></span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))<span class="comment">//50.26</span></span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))<span class="comment">//50.26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟memorize方法的实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>)</span><br><span class="line">    cache[key] =  cache[key] || f.apply(f, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="可测试"><a href="#可测试" class="headerlink" title="可测试"></a>可测试</h4><ul>
<li>始终有输入输出，纯函数让单元测试更方便，</li>
</ul>
<br>

<h4 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h4><ul>
<li>在多线程环境下并行去操作共享的内存数据可能会出现意外情况</li>
<li>纯函数只依赖参数，不需要访问共享的内存数据，所以在并行环境下可以任意运行纯函数（Web Worker）</li>
</ul>
<br>

<h3 id="纯函数的副作用"><a href="#纯函数的副作用" class="headerlink" title="纯函数的副作用"></a>纯函数的副作用</h3><p>纯函数：对于相同的输入始终有相同的输出，而且没有任何可观察的“<strong>副作用</strong>”</p>
<p>副作用让一个函数变的不纯（如上例），纯函数根据相同输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用</p>
<p>副作用来源：</p>
<ul>
<li>配置文件</li>
<li>数据库</li>
<li>获取用户的输入</li>
<li>……</li>
</ul>
<p>所有的外部交互都有可能代理副作用，副作用也使得方法通用性下降不适合扩展和可重复性用，同时副作用会给程序中带来安全隐患给程序带来不确定性，但是副作用不可能完全禁止，尽可能控制它们在可控范围内发生。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不纯</span></span><br><span class="line"><span class="keyword">let</span> mini = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= mini</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//纯函数（有硬编码，后续可以通过柯里化解决）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mini = <span class="number">18</span></span><br><span class="line">  <span class="keyword">return</span> age &gt;= <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="柯里化（Haskell-Brooks-Curry）"><a href="#柯里化（Haskell-Brooks-Curry）" class="headerlink" title="柯里化（Haskell Brooks Curry）"></a>柯里化（Haskell Brooks Curry）</h3><h4 id="使用柯里化解决上一个案例硬编码问题"><a href="#使用柯里化解决上一个案例硬编码问题" class="headerlink" title="使用柯里化解决上一个案例硬编码问题"></a>使用柯里化解决上一个案例硬编码问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通纯函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span> (<span class="params">mini, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= mini</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span> (<span class="params">min</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= min</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ES6的方式</span><br><span class="line"><span class="keyword">let</span> checkAge = <span class="function"><span class="params">min</span> =&gt;</span> (<span class="function"><span class="params">age</span> =&gt;</span> age &gt;= min)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checkAge18 = checkAge(<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<br>

<h4 id="lodash中柯里化的使用"><a href="#lodash中柯里化的使用" class="headerlink" title="lodash中柯里化的使用"></a>lodash中柯里化的使用</h4><ul>
<li>_.curry(func)<ul>
<li>功能：创一个函数，该函数接受一个或多个func的参数，如果func所需要的参数都被提供则执行func并返回执行的结果。否则继续返回该函数并等待接收剩余的参数</li>
<li>参数：需要柯里化的参数</li>
<li>返回值：柯里化后的函数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curried = _.lodash(getSum)</span><br><span class="line"></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">//6</span></span><br><span class="line">curried(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)<span class="comment">//6</span></span><br><span class="line"><span class="comment">//将函数转换成一元函数</span></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)<span class="comment">//6</span></span><br></pre></td></tr></table></figure>
<br>

<h4 id="柯里化案例"><a href="#柯里化案例" class="headerlink" title="柯里化案例"></a>柯里化案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.match(<span class="regexp">/\s+/g</span>)<span class="comment">//空白</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.match(<span class="regexp">/\d+/g</span>)<span class="comment">//数字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span> (<span class="params">reg, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.match(reg, str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> match = _curry(<span class="function"><span class="keyword">function</span> (<span class="params">reg, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.match(reg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> haveSpace = match(<span class="regexp">/\s+/g</span>)</span><br><span class="line"><span class="keyword">const</span> haveNumber = match(<span class="regexp">/\d+/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filter = _.curry(<span class="function"><span class="keyword">function</span> (<span class="params">fun, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(fun)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filter(haveSpace, [<span class="string">&#x27;John Conner&#x27;</span>, <span class="string">&#x27;john_Donne&#x27;</span>]))</span><br><span class="line"><span class="comment">//[&#x27;John Conner&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findSpace = filter(haveSpace)</span><br><span class="line"><span class="built_in">console</span>.log(findSpace(,[<span class="string">&#x27;John Conner&#x27;</span>, <span class="string">&#x27;john_Donne&#x27;</span>]))</span><br><span class="line"><span class="comment">//[&#x27;John Conner&#x27;]</span></span><br></pre></td></tr></table></figure>

<br>

<h4 id="柯里化原理模拟"><a href="#柯里化原理模拟" class="headerlink" title="柯里化原理模拟"></a>柯里化原理模拟</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curriedFn</span>(<span class="params">...args</span>) </span>&#123;<span class="comment">//剩余参数</span></span><br><span class="line">    <span class="comment">//判断实参和形参的个数</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; func.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curriedFn(...args.concat(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func(...args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— 函数组合</title>
    <url>/2021/03/22/2021-03-22%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h1><br>

<ul>
<li>纯函数和柯里化很容易写出洋葱代码 h(g(f(x)))</li>
<li>函数组合可以让我们把细粒度的函数重新组合成一个新的函数</li>
<li>lodash中组合函数flow()或者flowRight()，他们都可以组合多个函数</li>
<li>函数的组合要满足结合律</li>
</ul>
<br>

<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>下面这张图表示程序中使用函数处理数据的过程，给fn函数输入参数a，返回结果b。可以想象成a数据通过一个管道得到了b数据。<br><img lazyload src="/images/loading.svg" data-src="2021-03-22%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88/fn.png" alt="管道" loading="lazy"></p>
<br>

<p>当fn函数比较复杂的时候，我们可以把函数fn拆分成多个小函数，此时多了中间运算过程长生的m和n</p>
<p>下面这张图中可以想象成把fn管道拆分成了3个管道f1,f2,f3,数据a通过管道f3得到结果m.m再通过管道f2得到结果n，n通过管道得到最终结果b</p>
<p><img lazyload src="/images/loading.svg" data-src="2021-03-22%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88/fn_mn.png" alt="管道" loading="lazy"></p>
<br>

<h2 id="函数组合-1"><a href="#函数组合-1" class="headerlink" title="函数组合"></a>函数组合</h2><p> 如果一个函数要经过多个函数处理才能得到最终结果，这个时候可以把中间过程的函数合并成一个函数</p>
<ul>
<li>函数就像式数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li>
<li><strong>函数组合默认从右向左执行</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(g(val))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数组最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> last = compose(first, reverse)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(last([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="lodash中的组合函数"><a href="#lodash中的组合函数" class="headerlink" title="lodash中的组合函数"></a>lodash中的组合函数</h2><ul>
<li>lodash中组合函数flow()或者flowRight()，他们都可以组合多个函数</li>
<li>flow()是从左到右运行</li>
<li>flowRight()是从右到左运行，使用更多一些</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reverse()</span><br><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> toUpper = <span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = _.flowRight(toUpper, first, reverse)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))<span class="comment">//D</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="组合函数原理模拟"><a href="#组合函数原理模拟" class="headerlink" title="组合函数原理模拟"></a>组合函数原理模拟</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reverse()</span><br><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> toUpper = <span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = _.flowRight(toUpper, first, reverse)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))<span class="comment">//D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟flowRight</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reverse().reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, fn</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(acc)</span><br><span class="line">    &#125;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="function"><span class="params">val</span> =&gt;</span> ...args.reverse().reduce((acc, fn) = &gt; fn(acc), value)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="函数的组合要满足结合律"><a href="#函数的组合要满足结合律" class="headerlink" title="函数的组合要满足结合律"></a>函数的组合要满足结合律</h2><p> 我们既可以把g和h组合，还可以把f和g组合，结果都是一样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结合率（associativity）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = compose(f, g, h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> associative = compose(compose(f, g), h) == compose(f, compose(g, h))<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = _.flowRight(_.toUpper, _.first, _.reverse)</span><br><span class="line"><span class="keyword">const</span> f2 = _.flowRight(_flowRight(_.toUpper, _.first), _.reverse)</span><br><span class="line"><span class="keyword">const</span> f3 = _.flowRight(_.toUpper, _.flowRight(_.first, _.reverse))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))<span class="comment">//THREE</span></span><br><span class="line"><span class="built_in">console</span>.log(f2([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))<span class="comment">//THREE</span></span><br><span class="line"><span class="built_in">console</span>.log(f3([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))<span class="comment">//THREE</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="函数的组合的调试"><a href="#函数的组合的调试" class="headerlink" title="函数的组合的调试"></a>函数的组合的调试</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数组合的调试</span></span><br><span class="line"><span class="comment">//NEVER SAY DIE --&gt; never say die</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trace = _.curry(<span class="function">(<span class="params">tag, v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tag)</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> split = _.curry(<span class="function">(<span class="params">sep, str</span>) =&gt;</span> _.split(str, sep))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> join = _.curry(<span class="function">(<span class="params">sep. arr</span>) =&gt;</span> _.join(arr, sep))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toLower = _.curry(<span class="function">(<span class="params">fn, arr</span>) =&gt;</span> _.map(arr, fn))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = _.flowRight(join(<span class="string">&#x27;-&#x27;</span>), log(), toLower(_.toLower), log(), split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="string">&#x27;NEVER SAY DIE&#x27;</span>))</span><br><span class="line"><span class="comment">//[&#x27;NEVER&#x27;, &#x27;SAY&#x27;, &#x27;DIE&#x27;]</span></span><br><span class="line"><span class="comment">//[&#x27;never&#x27;, &#x27;say&#x27;, &#x27;die&#x27;]</span></span><br><span class="line"><span class="comment">//never-say-die</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = _.flowRight(join(<span class="string">&#x27;-&#x27;</span>), trace(<span class="string">&#x27;toLower&#x27;</span>), toLower(_.toLower), trace(<span class="string">&#x27;split&#x27;</span>), split(<span class="string">&#x27; &#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>函数式编程lodash —— FP模块</title>
    <url>/2021/03/23/2021-03-23%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-lodash-FP%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="lodash中的FP模块"><a href="#lodash中的FP模块" class="headerlink" title="lodash中的FP模块"></a>lodash中的FP模块</h1><ul>
<li>lodash的fp模块提供了实用的<strong>对函数式编程友好</strong>的方法</li>
<li>提供了不可变<strong>auto-curries iteratee-first data-last</strong>的方法</li>
<li>lodash和lodash/fp模块中map方法的区别</li>
<li>Point Free的介绍和使用</li>
<li>Functor(函子)</li>
<li>Either函子处理异常</li>
<li>IO 函子包装当前纯的操作，把不纯的返回给调用者执行，IO函子传入的是方法，且不执行，map同样传入方法，将两个方法组合成一个新的函数</li>
</ul>
<br>

<p><strong>parseInt()接收的第二个参数是进制(2-36)</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数组合的调试</span></span><br><span class="line"><span class="comment">//NEVER SAY DIE --&gt; never say die</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = fp.flowRight(fp.join(<span class="string">&#x27;-&#x27;</span>), fp.map(fp.toLower), fp.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="string">&#x27;NEVER SAY DIE&#x27;</span>))</span><br><span class="line"><span class="comment">//never-say-die</span></span><br></pre></td></tr></table></figure>
<br>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_.map([<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;10&#x27;</span>], <span class="built_in">parseInt</span>))<span class="comment">//[23, NaN, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//lodash的map方法会传递三个参数</span></span><br><span class="line"><span class="comment">//类似于以下执行顺序</span></span><br><span class="line"><span class="comment">//parseInt(&#x27;23&#x27;, 0, array)</span></span><br><span class="line"><span class="comment">//parseInt(&#x27;8&#x27;, 1, array)</span></span><br><span class="line"><span class="comment">//parseInt(&#x27;10&#x27;, 2, array)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//lodash中的fp模块只会传递一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(fp.map(<span class="built_in">parseInt</span>, [<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;10&#x27;</span>]))</span><br><span class="line"><span class="comment">//[23, 8, 10]</span></span><br></pre></td></tr></table></figure>
<br>

<h4 id="lodash的map接收三个参数"><a href="#lodash的map接收三个参数" class="headerlink" title="lodash的map接收三个参数"></a>lodash的map接收三个参数</h4><p><img lazyload src="/images/loading.svg" data-src="2021-03-23%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-lodash-FP%E6%A8%A1%E5%9D%97/lodash_map.png" alt="lodash_map" loading="lazy"></p>
<br>

<h4 id="而fp模块的map接收一个参数"><a href="#而fp模块的map接收一个参数" class="headerlink" title="而fp模块的map接收一个参数"></a>而fp模块的map接收一个参数</h4><p><img lazyload src="/images/loading.svg" data-src="2021-03-23%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-lodash-FP%E6%A8%A1%E5%9D%97/lodash_fp_map.png" alt="lodash_map" loading="lazy"></p>
<br>

<h2 id="Point-Free"><a href="#Point-Free" class="headerlink" title="Point Free"></a>Point Free</h2><p>我们可以把数据处理的过程定义成与数据无关的合成运算,不需要用到代表数据的那个参数,只要把简单的运算步骤合成到一起,在使用这种模式之前我们需要定义一些辅助的基本运算函数.</p>
<ul>
<li><strong>不需要指明处理的数据</strong></li>
<li><strong>只需要合成运算过程</strong></li>
<li><strong>需要定义一些辅助的基本运算函数</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Point Free</span></span><br><span class="line"><span class="comment">//Hello World --&gt; hello_world</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = fp.flowRight(fp.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>), fp.toLower)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">&#x27;Hello World&#x27;</span>))<span class="comment">//hello_world</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="Point-Free案例"><a href="#Point-Free案例" class="headerlink" title="Point Free案例"></a>Point Free案例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把一个字符串中的首字母提取并转换成大写,使用.作为分隔符</span></span><br><span class="line"><span class="comment">//world wild web --&gt; W.W.W</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstLetterToUpper = fp.flowRight(fp.join(<span class="string">&#x27;.&#x27;</span>), fp.map(fp.toUpper), fp.map(fp.first), fp.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstLetterToUpper = fp.flowRight(fp.join(<span class="string">&#x27;.&#x27;</span>), fp.map(fp.flowRight(fp.first, fp.toUpper)), fp.split(<span class="string">&#x27; &#x27;</span>))</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Functor-函子"><a href="#Functor-函子" class="headerlink" title="Functor(函子)"></a>Functor(函子)</h2><h3 id="为什么要学函子"><a href="#为什么要学函子" class="headerlink" title="为什么要学函子"></a>为什么要学函子</h3><p>到目前位置已经学习了函数式编程的一些基础,但是我们还没有演示在函数式编程中如何把副作用控制在可控范围内,异常处理,异步操作等。</p>
<h3 id="什么是Functor"><a href="#什么是Functor" class="headerlink" title="什么是Functor"></a>什么是Functor</h3><ul>
<li>容器:包含值和值的变形关系(这个变形关系就是函数)</li>
<li>函子:是一个特殊的容器,通过一个普通的对象来实现,该对象具有map方法,map方法可以运行一个函数对值进行处理(变形关系)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functor 函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Container(<span class="number">5</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r)<span class="comment">// Container &#123;_value: 36 &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functor 函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = Container.of(<span class="number">5</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r)<span class="comment">// Container &#123;_value: 36 &#125;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>函数式编程的运算不直接操作值,而是由函子完成</li>
<li>函子就是一个实现了map契约的对象</li>
<li>我们可以把函子想象成一个盒子,这个盒子里封装了一个值</li>
<li>想要处理盒子中的值,我们需要给盒子的map方法传递一个处理值的函数(纯函数),由这个函数来对值进行处理</li>
<li>最终map方法返回一个包含新值的盒子(函子)</li>
</ul>
<br>

<h2 id="MayBe函子"><a href="#MayBe函子" class="headerlink" title="MayBe函子"></a>MayBe函子</h2><ul>
<li>我们在编程的过程中可能遇到很多错误,需要对这些错误做相应的处理</li>
<li>MayBe函子作用就是可以对外部空值情况做处理(控制副作用在允许的范围)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MayBe 函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MayBe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MayBe(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isNothing() ? MayBe.of(<span class="literal">null</span>) : MayBe.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">  isNothing () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value === <span class="literal">null</span> || <span class="built_in">this</span>.value === <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = MayBe.of(<span class="string">&#x27;aaa&#x27;</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toUpper())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r1)<span class="comment">// Container &#123;_value: &#x27;AAA&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r2 = MayBe.of(<span class="string">&#x27;aaa&#x27;</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toUpper())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r2)<span class="comment">// Container &#123;_value: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r3 = MayBe.of(<span class="string">&#x27;aaa&#x27;</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toUpper()).map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="comment">//不清楚哪个步骤产生了null      </span></span><br><span class="line"><span class="built_in">console</span>.log(r3)<span class="comment">// Container &#123;_value: null &#125;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="Either函子"><a href="#Either函子" class="headerlink" title="Either函子"></a>Either函子</h2><ul>
<li>Either两者中的任何一个,类似于if…else…的处理</li>
<li>异常会让函数变的不纯，Either函子可以用来做异常处理<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Either 函子</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Left</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Left(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Right</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Right(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> Right.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示一个会发生错误的案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJSON</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Right.of(<span class="built_in">JSON</span>.parse(str))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> Left.of(&#123;<span class="attr">error</span>: e.message&#125; )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = parseJSON(<span class="string">&#x27;&#123;name: zs &#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(r1)<span class="comment">//Left &#123; _value: &#123; error: &#x27;Unexpected token n in JSON at position 2&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r2 = parseJSON(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;zs&quot; &#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(r2)<span class="comment">//Right &#123; _value: &#123;name: &#x27;zs&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h2 id="IO函子"><a href="#IO函子" class="headerlink" title="IO函子"></a>IO函子</h2><ul>
<li>IO 函子中的_value 是一个函数，这里是把函数作为值来处理</li>
<li>IO 函子可以把不纯的动作存储到_value中，延时执行这个不纯的操作（惰性执行），包装当前的纯操作</li>
<li>把不纯的操作交给调用者来处理<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IO 函子</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = IO.of(process).map(<span class="function"><span class="params">p</span> =&gt;</span> p.execPath)</span><br><span class="line"><span class="built_in">console</span>.log(r)<span class="comment">//IO &#123;_VALUE： [Function] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r._value())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>函数式编程 —— Folktale</title>
    <url>/2021/03/30/2021-03-30%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-Folktale/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<h1 id="Task异步执行"><a href="#Task异步执行" class="headerlink" title="Task异步执行"></a>Task异步执行</h1><ul>
<li>异步任务的实现过于复杂，我们使用folktale中的Task来演示</li>
<li>folktale一个标准的函数式编程库<ul>
<li>和lodash、ramda不同的是，他没有提供很多功能函数</li>
<li>只提供了一些函数式处理的操作，例如：compose、curry等，一些函子Task、Either、MayBe等</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//folktale 中的 compose、curry</span></span><br><span class="line"><span class="keyword">const</span> &#123;compose, curry&#125; = <span class="built_in">require</span>(<span class="string">&#x27;folktale/core/lambda&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;toUpper, first&#125; = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">curry第一个参数是第二个传入方法的入参数</span><br><span class="line"><span class="keyword">let</span> f1 = curry(<span class="number">2</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>)(<span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = compose(toUpper, first)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]))<span class="comment">//ONE</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="Task异步执行-1"><a href="#Task异步执行-1" class="headerlink" title="Task异步执行"></a>Task异步执行</h2><ul>
<li>folktale(2.3.2)2.x中的Task和1.0中的Task区别很大，1.0中的用法更接近我们现在演示的函子</li>
<li>这里用2.3.2来演示<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Task异步任务</span></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; task &#125; = <span class="built_in">require</span>(<span class="string">&#x27;folktale/concurrency/task&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; split, find &#125; = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span> (<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> task(<span class="function"><span class="params">resolver</span> =&gt;</span> &#123;</span><br><span class="line">    fs..readFile(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">&#x27;package.json&#x27;</span>)<span class="comment">//返回读取文件的函子</span></span><br><span class="line">  .map(split(<span class="string">&#x27;\n&#x27;</span>))<span class="comment">//返回数组</span></span><br><span class="line">  .map(find(<span class="function"><span class="params">x</span> =&gt;</span> x.includes(<span class="string">&#x27;version&#x27;</span>)))<span class="comment">//返回含有version的字符串</span></span><br><span class="line">  .run()<span class="comment">//执行</span></span><br><span class="line">  .listen(&#123;<span class="comment">//监听执行结果</span></span><br><span class="line">    onRejected: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;,</span><br><span class="line">    onResolve: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h2 id="Pointed-函子"><a href="#Pointed-函子" class="headerlink" title="Pointed 函子"></a>Pointed 函子</h2><ul>
<li>Pointed 函子是实现了of静态方法的函子</li>
<li>of方法是为了避免使用new来创建对象，更深层的含义是of方法用来把值放到上下文Context（把值放到容器中，使用map来处理值）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">container.of(<span class="number">2</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h2 id="嵌套函子的问题"><a href="#嵌套函子的问题" class="headerlink" title="嵌套函子的问题"></a>嵌套函子的问题</h2><h3 id="IO函子的问题"><a href="#IO函子的问题" class="headerlink" title="IO函子的问题"></a>IO函子的问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模拟linux下cat命令，读取文件，并打印内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFileSync(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = fp.flowRight(print, readFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = cat(<span class="string">&#x27;package.json&#x27;</span>)</span><br><span class="line"><span class="comment">//IO(IO)</span></span><br><span class="line"><span class="built_in">console</span>.log(r1)<span class="comment">//IO &#123;_VALUE： [Function] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r2 = cat(<span class="string">&#x27;package.json&#x27;</span>)._value()._value()<span class="comment">//打印文件</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="Monad-函子"><a href="#Monad-函子" class="headerlink" title="Monad 函子"></a>Monad 函子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  join () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  flatMap (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map(fn).join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟linux下cat命令，读取文件，并打印内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFileSync(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = readFile(<span class="string">&#x27;package.json&#x27;</span>)</span><br><span class="line">          .flatMap(print)</span><br><span class="line">          .join()</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Monad-函子-1"><a href="#Monad-函子-1" class="headerlink" title="Monad 函子"></a>Monad 函子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  join () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  flatMap (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map(fn).join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟linux下cat命令，读取文件，并打印内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFileSync(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = readFile(<span class="string">&#x27;package.json&#x27;</span>)</span><br><span class="line">          .flatMap(print)</span><br><span class="line">          .join()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JavaScript异步编程 —— Generator</title>
    <url>/2021/04/06/2021-04-06JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-Generator/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><p>本章介绍了Generator提供的异步方案，用生成器函数yield暂停生成器函数执行的特点，来使用生成器函数生成更优的异步编程体验。<br>Async/Await语法糖，不需要调用next()方法，就可达成异步效果。</p>
<h1 id="Generator提供的异步方案"><a href="#Generator提供的异步方案" class="headerlink" title="Generator提供的异步方案"></a>Generator提供的异步方案</h1><p>ES2015提供的Generator</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器函数回顾</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用后不会立即执行，而是得到一个生成器对象</span></span><br><span class="line"><span class="keyword">const</span> generator = foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个对象的next()方法，这个函数的函数体才会开始执行</span></span><br><span class="line"><span class="keyword">const</span> result = generator.next()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//&#123;value: &#x27;foo&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">//done表示这个生成器是否已经执行结束 yield 只是暂停这个函数的执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用next方法，会继续往yield下执行</span></span><br><span class="line">generator.next(<span class="string">&#x27;bar&#x27;</span>)<span class="comment">//bar</span></span><br><span class="line"><span class="comment">//调用生成器对象传入的参数会作为yield的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部调用生成器对象的throw方法，生成器内部抛出异常</span></span><br><span class="line">generator.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Generator error&#x27;</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error: Generator error</span></span><br><span class="line"><span class="comment">  at</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="Generator提供的异步方案-1"><a href="#Generator提供的异步方案-1" class="headerlink" title="Generator提供的异步方案"></a>Generator提供的异步方案</h2><p>ES2015提供的Generator</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器函数回顾</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用后不会立即执行，而是得到一个生成器对象</span></span><br><span class="line"><span class="keyword">const</span> generator = foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个对象的next()方法，这个函数的函数体才会开始执行</span></span><br><span class="line"><span class="keyword">const</span> result = generator.next()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//&#123;value: &#x27;foo&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">//done表示这个生成器是否已经执行结束 yield 只是暂停这个函数的执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用next方法，会继续往yield下执行</span></span><br><span class="line">generator.next(<span class="string">&#x27;bar&#x27;</span>)<span class="comment">//bar</span></span><br><span class="line"><span class="comment">//调用生成器对象传入的参数会作为yield的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部调用生成器对象的throw方法，生成器内部抛出异常</span></span><br><span class="line">generator.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Generator error&#x27;</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error: Generator error</span></span><br><span class="line"><span class="comment">  at</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用生成器函数yield暂停生成器函数执行的特点，来使用生成器函数生成更优的异步编程体验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    xhr.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">yield</span> ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(users)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">yield</span> ajax(<span class="string">&#x27;/api/posts.json&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(posts)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = main()</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行第一个yield</span></span><br><span class="line"><span class="keyword">const</span> result = g.next()</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result2 = g.nex(data)</span><br><span class="line">  <span class="keyword">if</span>(result2.done) <span class="literal">true</span></span><br><span class="line">  result2.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result3 = g.next()</span><br><span class="line">    <span class="keyword">if</span>(result3.done) <span class="literal">true</span></span><br><span class="line">    result3.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打印users.json请求结果</span></span><br><span class="line"><span class="comment">//消灭了promise回调，近乎于同步代码的体验</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResult</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (result.done) &#123;<span class="keyword">return</span></span><br><span class="line">  result.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    handleResult(g.next(data))</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    g.throw(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成器不结束，递归一直执行，将生成器函数中的所有yield调用全部执行下去。</span></span><br><span class="line">handleResult(g.next())</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装成一个公共的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span> (<span class="params">generator</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> g = generator()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleResult</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.done) &#123;<span class="keyword">return</span></span><br><span class="line">    result.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      handleResult(g.next(data))</span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      g.throw(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  handleResult(g.next())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(main)</span><br></pre></td></tr></table></figure>
<p>github社区中已有这样一个库<a class="link" href="https://github.com/tj/co">https://github.com/tj/co<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Async-Await语法糖"><a href="#Async-Await语法糖" class="headerlink" title="Async/Await语法糖"></a>Async/Await语法糖</h2><p>ES2017提供的，同样扁平化的编程体验，语言层面的标准编程语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(users)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> ajax(<span class="string">&#x27;/api/posts.json&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(posts)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//await只能出现在await中</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JavaScript异步函数 —— 前置知识</title>
    <url>/2021/04/04/2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><br>

<p>JavaScript环境以单线程模式执行，因为最早设计javaScript实现页面的动态交互，交互的核心是dom操作，这使得它必须以单线程操作，否则出现复杂的线程同步问题。</p>
<p>优点：安全，简单<br>缺点：出现假死情况</p>
<p>为了防止出现这种阻塞执行问题。JavaScript将任务的执行模式分成了两种（<strong>运行环境的API是以同步或异步模式的方式工作</strong>）</p>
<ul>
<li>同步模式（Synchronous）</li>
<li>异步模式（Asynchronous）</li>
</ul>
<p>异步调用有各自的time line，不会受到调用栈和消息队列影响</p>
<h1 id="内容概要："><a href="#内容概要：" class="headerlink" title="内容概要："></a>内容概要：</h1><ul>
<li>同步模式与异步模式表象上的差异</li>
<li>事件循环与消息队列</li>
<li>异步编程的集中方式</li>
<li>Promise异步方案、宏任务/微任务队列（es6）</li>
<li>Generator异步方案（es6）、Async/Await语法糖（es8）</li>
</ul>
<h2 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h2><p>代码在调用栈中依次执行，通俗的说：js在执行引擎中维护了一个正在工作的工作表</p>
<h2 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h2><p>不会等待这个任务结束才去执行下一个任务，任务开启过后就立即往后执行下一个任务，后续逻辑一般会通过回调函数的方式定义,<br>难点：执行顺序混乱</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下代码执行顺序</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;global begin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">time1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;time1 invoke&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">time2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;time2 invoke&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">time2inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;time2inner invoke&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;global end&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<p><img lazyload src="/images/loading.svg" data-src="2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Asynchronous1.png" alt="开始" loading="lazy"></p>
<p>加载全部代码，在调用栈中压入一个匿名的全局调用，依次执行每行代码，同步API和同步模式一致，打印global begin,<br>web API为timer1开启一个倒计时器，<strong>倒计时器单独工作，不会受当前js线程影响，有各自的time line，不会受到调用栈和消息队列影响</strong>，开始过后即开始执行，打印global end后，整体的匿名调用就执行完成，清空调用栈。<br><img lazyload src="/images/loading.svg" data-src="2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Asynchronous2.png" alt="开始" loading="lazy"><br>调用栈清空后，此时Event loop发挥作用，监听调用栈和消息队列。<br>timer2倒计时器先结束，timer2函数放置于消息队列，消息队列发生改变，Event loop将消息队列中第一个压入调用栈，开启新一轮的执行<br><img lazyload src="/images/loading.svg" data-src="2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Asynchronous3.png" alt="开始" loading="lazy"></p>
<p>过程又遇到异步调用，放入API中单独执行<br><img lazyload src="/images/loading.svg" data-src="2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Asynchronous4.png" alt="开始" loading="lazy"></p>
<p>直到调用栈和消息队列中没有需要执行的任务，整体代码执行完成。<br><strong>js引擎先做完调用栈中的所有任务，然后通过事件循环从消息队列中依次取出任务执行</strong><br><img lazyload src="/images/loading.svg" data-src="2021-04-04JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Asynchronous5.png" alt="开始" loading="lazy"></p>
<br>]]></content>
  </entry>
  <entry>
    <title>JavaScript异步函数 —— Promise</title>
    <url>/2021/04/05/2021-04-05JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-Promise/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><p>Promise相比传统回调的方式，最大的优势：通过链式调用解决回调过程中的问题。</p>
<ul>
<li>Promise对象的then方法会返回一个全新的Promise对象</li>
<li>后面的then方法就是在为上一个then返回的Promise注册回调</li>
<li>前面then方法中回调函数的返回值会作为后面then方法回调的参数</li>
<li>如果回调中返回的是Promise，那么后面then方法的回调会等待它的结束</li>
</ul>
<p>回调队列中的任务成为宏任务，宏任务中会临时新加一些额外的需求，可以选择作为一个新的宏任务进到队列中排队，也可以作为当前任务的<strong>微任务</strong>，promise的回调会作为微任务执行。<strong>提高了整体的响应效率</strong><br>目前绝大部分异步调用都是作为宏任务执行，Promise&amp;MutationObserver&amp;Node中的process.nextTick会作为微任务在调用末尾执行。</p>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>为了避免回调地狱的问题，推出了Promise的规范</p>
<p><img lazyload src="/images/loading.svg" data-src="2021-04-05JavaScript%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-Promise/promise.png" alt="开始" loading="lazy"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Promise的基本用法</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//resolve(100)</span></span><br><span class="line"></span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;promise rejected&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;resolved&#x27;</span>, val)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">OnRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;rejected&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">//先打印end，证明promise的回调会进入消息队列</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="Promise方式的Ajax"><a href="#Promise方式的Ajax" class="headerlink" title="Promise方式的Ajax"></a>Promise方式的Ajax</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    xhr.onLoad = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//html5中提供的新事件，readyState = 4时才会执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status === <span class="number">200</span>)&#123;<span class="comment">//请求成功</span></span><br><span class="line">        resolve(<span class="built_in">this</span>.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="built_in">this</span>.statusText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一般指接收到响应数据的状态：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0：未初始化。new完后;</span></span><br><span class="line"><span class="comment">1：已打开。对象已经创建并初始化，但还未调用send方法</span></span><br><span class="line"><span class="comment">2：已发送。已经调用send 方法，但该对象正在等待状态码和头的返回；</span></span><br><span class="line"><span class="comment">3：正在接收。已经接收了部分数据，但还不能使用该对象的属性和方法，因为状态和响应头不完整；</span></span><br><span class="line"><span class="comment">4：已加载。所有数据接收完毕</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">ajax(<span class="string">&#x27;/api/users.json&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h3><p>尽量保证异步任务扁平化<br>.then中必须是函数，如果不是函数，则无视它</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//promise会返回一个新的promise对象</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;onFulfilled&#x27;</span>, val)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">OnRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;OnRejected&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一个then方法都是为上一个then返回的promise添加状态明确后的回调</span></span><br><span class="line">ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">&#x27;/api/urls.json&#x27;</span>)</span><br><span class="line">  &#125;)<span class="comment">// =&gt; promise</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)<span class="comment">// =&gt; promise</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)<span class="comment">//foo</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)<span class="comment">//undefined</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>每一个then方法都是为上一个then返回的promise对象添加状态明确后的回调，这些promise依次执行</strong><br><strong>每个承诺负责一个异步任务，并且相互之间不会影响</strong><br><strong>如果then中返回的是常量值，当前then方法返回promise中的常量值，后面then会接收这个常量值</strong><br><strong>没有返回值，会接收一个undefined</strong></p>
<br>

<h3 id="Promise异常处理"><a href="#Promise异常处理" class="headerlink" title="Promise异常处理"></a>Promise异常处理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;onFulfilled&#x27;</span>, val)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;onRejected&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ajax(&#x27;/api/users.json&#x27;)</span></span><br><span class="line"><span class="comment">  .then(function onFulfilled(val)&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;onFulfilled&#x27;, val)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  .then(undefined, function onRejected(err) &#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;onRejected&#x27;, err)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;onFulfilled&#x27;</span>, val)</span><br><span class="line">  &#125;)<span class="comment">// =&gt; promise</span></span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//可以捕获then中的失败回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;onRejected&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局捕获 Promise 异常，类似于 window.onerror</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; reason, promise &#125; = event</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(reason, promise)</span><br><span class="line">  <span class="comment">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class="line">  <span class="comment">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class="line"></span><br><span class="line">  event.preventDefault()</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">Node.js 中使用以下方式</span><br><span class="line"> process.on(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(reason, promise)</span><br><span class="line">   <span class="comment">// reason =&gt; Promise 失败原因，一般是一个错误对象</span></span><br><span class="line">   <span class="comment">// promise =&gt; 出现异常的 Promise 对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br>

<h3 id="Promise静态方法"><a href="#Promise静态方法" class="headerlink" title="Promise静态方法"></a>Promise静态方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>)<span class="comment">////返回一个foo作为返回值，成功的promise的对象</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="built_in">Promise</span>.resolve(promise)</span><br><span class="line"><span class="built_in">console</span>.log(promise === promise2)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//Promise.resolve 去包装一个promise对象，返回的就是传入的promise对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为了适应promise之前的第三方的Promise的对象</span></span><br><span class="line"><span class="built_in">Promise</span>。resolve(&#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    onFulfilled(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不论传入任何参数都会作为失败的原因</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">&#x27;anyThing&#x27;</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="Promise并行执行"><a href="#Promise并行执行" class="headerlink" title="Promise并行执行"></a>Promise并行执行</h3><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.all([</span><br><span class="line">  ajax(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line">  ajax(<span class="string">&#x27;/api/posts.json&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部执行成功结束后，才会执行then</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">values</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="comment">//其中一个失败就会执行catch</span></span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//串联</span></span><br><span class="line">ajax(<span class="string">&#x27;/api/urls.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = <span class="built_in">Object</span>.values(value)<span class="comment">//获取对象中所有属性的值</span></span><br><span class="line">    <span class="keyword">const</span> tasks = urls.map(<span class="function"><span class="params">url</span> =&gt;</span> ajax(url))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Promise.race只要有任何一个完成，返回的promise对象就会完成</span></span><br><span class="line"><span class="keyword">const</span> request = ajax(<span class="string">&#x27;/api/posts.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> timeout = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;timeout&#x27;</span>)), <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  request,</span><br><span class="line">  timeout</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//先request执行完成则执行then，先timeout执行完成则执行catch</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="Promise执行时序-宏任务-amp-微任务"><a href="#Promise执行时序-宏任务-amp-微任务" class="headerlink" title="Promise执行时序/宏任务&amp;微任务"></a>Promise执行时序/宏任务&amp;微任务</h3><p>Promise中的回调函数仍然会进入回调队列中排队执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//微任务，提高整体的响应效率</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)<span class="comment">//setTimeout第二个参数在html5中最小值为4ms，如果低于这个值，就会自动增加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Promise&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Promise3&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印结果</span></span><br><span class="line"><span class="comment">promise</span></span><br><span class="line"><span class="comment">promise2</span></span><br><span class="line"><span class="comment">promise3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">setTimeout</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>回调队列中的任务成为宏任务，宏任务中会临时新加一些额外的需求，可以选择作为一个新的宏任务进到队列中排队，也可以作为当前任务的<strong>微任务</strong>，promise的回调会作为微任务执行。<strong>提高了整体的响应效率</strong><br>目前绝大部分异步调用都是作为宏任务执行，Promise&amp;MutationObserver&amp;Node中的process.nextTick会作为微任务在调用末尾执行。</p>
]]></content>
  </entry>
  <entry>
    <title>ECMAScript新特性 —— ES2015(1)</title>
    <url>/2021/04/13/2021-04-13ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-1/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><h1 id="ECMAScript新特性"><a href="#ECMAScript新特性" class="headerlink" title="ECMAScript新特性"></a>ECMAScript新特性</h1><p>JavaScript语言本身就是指的是ECMAScript</p>
<p>为了理解语言和平台之间的关系，区分ECMAScript和JavaScript，系统了解ECMAScript发展过程和新特性</p>
<p>实际上JavaScript是ECMAScript的扩展语言，ECMAScript只提供了最基本的语法</p>
<h2 id="JavaScript-Web"><a href="#JavaScript-Web" class="headerlink" title="JavaScript @ Web"></a>JavaScript @ Web</h2><p>在浏览器环境中JavaScript等于ECMAScript和Web APIs包括BOM和DOM操作。<br><img lazyload src="/images/loading.svg" data-src="2021-04-13ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-1/web.png" alt="javascript@web" loading="lazy"></p>
<h2 id="JavaScript-Node-js"><a href="#JavaScript-Node-js" class="headerlink" title="JavaScript @ Node.js"></a>JavaScript @ Node.js</h2><p>在node.js环境中中JavaScript等于ECMAScript和Node APIs包括fs和net模块提供的API。<br><img lazyload src="/images/loading.svg" data-src="2021-04-13ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-1/node.png" alt="javascript@node" loading="lazy"></p>
<h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><ul>
<li>解决原有语法上的一些问题或不足</li>
<li>对原有语法进行增强</li>
<li>全新的对象、全新的方法、全新的功能</li>
<li>全新的数据类型和数据结构</li>
</ul>
<h2 id="ES2015-let与块级作用域"><a href="#ES2015-let与块级作用域" class="headerlink" title="ES2015 let与块级作用域"></a>ES2015 let与块级作用域</h2><p> let 不会变量提升<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(j)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>;k &lt; <span class="number">3</span>;k++)&#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(k &lt; <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k ++</span><br><span class="line"><span class="keyword">if</span>(k &lt; <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k ++</span><br><span class="line"><span class="keyword">if</span>(k &lt; <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-const"><a href="#ES2015-const" class="headerlink" title="ES2015 const"></a>ES2015 const</h2><p>恒量，常量（变量声明后，指向不能修改）<br>可以修改指向的内部成员<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">a = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="comment">//报错，const的指向不能改变</span></span><br><span class="line"><span class="keyword">const</span> b </span><br><span class="line">b = <span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="comment">//报错，声明时必须赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.name = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="comment">//没有改变const 的指向，不报错</span></span><br></pre></td></tr></table></figure></p>
<p>最佳实践，主用const</p>
<br>

<h2 id="ES2015-数组的解构"><a href="#ES2015-数组的解构" class="headerlink" title="ES2015 数组的解构"></a>ES2015 数组的解构</h2><p> Destructuring<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"></span><br><span class="line"> <span class="comment">//以前</span></span><br><span class="line"> <span class="keyword">const</span> foo = arr[<span class="number">0</span>]</span><br><span class="line"> <span class="keyword">const</span> bar = arr[<span class="number">1</span>]</span><br><span class="line"> <span class="keyword">const</span> baz = arr[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar, baz)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构写法</span></span><br><span class="line"><span class="keyword">const</span> [foo, bar, baz] = arr</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar, baz)</span><br><span class="line"></span><br><span class="line"><span class="comment">//只获取指定位置成员</span></span><br><span class="line"><span class="keyword">const</span> [, , baz] = arr</span><br><span class="line"><span class="built_in">console</span>.log(baz)<span class="comment">//300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构最后一个设为...rest，获取之后成员的数组</span></span><br><span class="line"><span class="keyword">const</span> [foo, ...rest] = arr</span><br><span class="line"><span class="built_in">console</span>.log(rest)<span class="comment">//[200, 300]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//超过范围</span></span><br><span class="line"><span class="keyword">const</span> [foo, bar, baz, more] = arr</span><br><span class="line"><span class="built_in">console</span>.log(more)<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设定默认值</span></span><br><span class="line"><span class="keyword">const</span> [foo, bar, baz, more = <span class="string">&#x27;default value&#x27;</span>] = arr</span><br><span class="line"><span class="built_in">console</span>.log(more)<span class="comment">//default value</span></span><br><span class="line"></span><br><span class="line">实际应用</span><br><span class="line"><span class="keyword">const</span> path = <span class="string">&#x27;/foo/bar/baz&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> tmp = path.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rootDir = tmp[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(rootDir)<span class="comment">//foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> [, rootDir]</span><br><span class="line"><span class="built_in">console</span>.log(rootDir)<span class="comment">//foo</span></span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-对象的解构"><a href="#ES2015-对象的解构" class="headerlink" title="ES2015 对象的解构"></a>ES2015 对象的解构</h2><p> //对象没有下标，不能按顺序提取，根据属性名提取<br> Destructuring<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性：重命名 = 默认值</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: objName = <span class="string">&#x27;bbb&#x27;</span> &#125; = obj</span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-模板字符串"><a href="#ES2015-模板字符串" class="headerlink" title="ES2015 模板字符串"></a>ES2015 模板字符串</h2><p> <strong>${}中的内容就是JavaScript,可以嵌入语句，内容的返回值会作为输出</strong><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`hey,</span></span><br><span class="line"><span class="string">           <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-带标签的模板字符串"><a href="#ES2015-带标签的模板字符串" class="headerlink" title="ES2015 带标签的模板字符串"></a>ES2015 带标签的模板字符串</h2><p> 对模板进行加工,<strong>标签即函数</strong>,第一个入参即按照表达式分割过后的数组,可以用来对模板字符串进行处理<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="built_in">console</span>.log<span class="string">`hello world`</span></span><br><span class="line"><span class="comment">//[&#x27;hello world&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTagFun</span>(<span class="params">strings, name, gender</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(strings, name, gender)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = myTagFun<span class="string">`hello,<span class="subst">$&#123;name&#125;</span>,is <span class="subst">$&#123;gender&#125;</span>`</span></span><br><span class="line"><span class="comment">//[&#x27;hello,&#x27;, &#x27;is &#x27;], jack, true</span></span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-字符串的扩展方法"><a href="#ES2015-字符串的扩展方法" class="headerlink" title="ES2015 字符串的扩展方法"></a>ES2015 字符串的扩展方法</h2><ul>
<li>includes()</li>
<li>startsWith()</li>
<li>endsWith()<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;Error: foo is not defined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg.includes(<span class="string">&#x27;Error&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(msg.startsWith(<span class="string">&#x27;foo&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(msg.endsWith(<span class="string">&#x27;defined&#x27;</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<h2 id="ES2015-参数默认值"><a href="#ES2015-参数默认值" class="headerlink" title="ES2015 参数默认值"></a>ES2015 参数默认值</h2><p> <strong>参数默认值必须在最后，否则无法正常工作</strong><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar, enable = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-剩余参数"><a href="#ES2015-剩余参数" class="headerlink" title="ES2015 剩余参数"></a>ES2015 剩余参数</h2><p> …的rest用法<br> <strong>剩余参数必须在最后，且只能有一次</strong><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar, ...args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)<span class="comment">//[2, 3, 4]</span></span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-展示数组"><a href="#ES2015-展示数组" class="headerlink" title="ES2015 展示数组"></a>ES2015 展示数组</h2><p> …的spread用法<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"> <span class="comment">//之前只能用apply发放，因为apply可以接受数组参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">console</span>, arr)<span class="comment">// a, b, c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...arr)</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Promise实现 —— 核心逻辑实现</title>
    <url>/2021/04/06/2021-04-06Promise%E5%AE%9E%E7%8E%B0-%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><h1 id="Promise的执行核心逻辑的实现"><a href="#Promise的执行核心逻辑的实现" class="headerlink" title="Promise的执行核心逻辑的实现"></a>Promise的执行核心逻辑的实现</h1><ol>
<li>Promise就是一个类，在执行这个类的时候，需要传递一个执行器进去，执行器会立即执行</li>
<li>Promise中有三种状态，分别为 成功 fulfilled 失败 rejected 等待 pending</li>
</ol>
<ul>
<li>pending -&gt; fulfilled</li>
<li>pending -&gt; rejected</li>
<li>一旦状态确定就不可更改</li>
</ul>
<ol start="3">
<li>执行器会传入resolve和reject函数，调用这两个函数，会更改Promise的状态，resolve和reject函数是用来更改状态的</li>
</ol>
<ul>
<li>resolve: fulfilled</li>
<li>reject: rejected</li>
</ul>
<ol start="4">
<li>then方法内部做的事情就判断状态 如果状态是成功，调用成功的回调函数；如果状态是失败，调用失败的回调函数</li>
<li>then成功回调有一个参数 表示成功之后的值，then失败回调有一个参数，表示失败后的原因<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">  reject(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<br>

<h2 id="MyPromise"><a href="#MyPromise" class="headerlink" title="MyPromise"></a>MyPromise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">//MyPromise状态，定义成常量，编辑器有代码提示</span></span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="comment">//定义成箭头函数，this的指向MyPromise对象</span></span><br><span class="line">      <span class="comment">//判断是否已经执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">      <span class="comment">//保存成功之后的值</span></span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">      <span class="comment">//保存失败后的原因</span></span><br><span class="line">      <span class="built_in">this</span>.reason = reason;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  then (successCallback, failCallback) &#123;</span><br><span class="line">    <span class="comment">//判断状态</span></span><br><span class="line">    <span class="keyword">if</span>  (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.status === REJECTED)&#123;</span><br><span class="line">      failCallback(reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise中加入异步逻辑"><a href="#Promise中加入异步逻辑" class="headerlink" title="Promise中加入异步逻辑"></a>Promise中加入异步逻辑</h2><p>当执行函数有异步调用时，then方法不奏效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">//MyPromise状态，定义成常量，编辑器有代码提示</span></span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.successCallback = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.failCallback = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="comment">//定义成箭头函数，this的指向MyPromise对象</span></span><br><span class="line">      <span class="comment">//判断是否已经执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">      <span class="comment">//保存成功之后的值</span></span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">      <span class="comment">//判断成功回调是否存在，存在则调用</span></span><br><span class="line">      <span class="built_in">this</span>.successCallback &amp;&amp; <span class="built_in">this</span>.successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">      <span class="comment">//保存失败后的原因</span></span><br><span class="line">      <span class="built_in">this</span>.reason = reason;</span><br><span class="line">      <span class="comment">//判断失败回调是否存在，存在则调用</span></span><br><span class="line">      <span class="built_in">this</span>.failCallback &amp;&amp; <span class="built_in">this</span>.failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  then (successCallback, failCallback) &#123;</span><br><span class="line">    <span class="comment">//判断状态</span></span><br><span class="line">    <span class="keyword">if</span>  (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.status === REJECTED)&#123;</span><br><span class="line">      failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//保存成功和失败回调</span></span><br><span class="line">      <span class="built_in">this</span>.successCallback = successCallback;</span><br><span class="line">      <span class="built_in">this</span>.failCallback = failCallback;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="实现then方法多次调用，添加多个处理函数"><a href="#实现then方法多次调用，添加多个处理函数" class="headerlink" title="实现then方法多次调用，添加多个处理函数"></a>实现then方法多次调用，添加多个处理函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">//MyPromise状态，定义成常量，编辑器有代码提示</span></span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.successCallback = [];</span><br><span class="line">    <span class="built_in">this</span>.failCallback = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="comment">//定义成箭头函数，this的指向MyPromise对象</span></span><br><span class="line">      <span class="comment">//判断是否已经执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">      <span class="comment">//保存成功之后的值</span></span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">this</span>.successCallback.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.successCallback.shift()(<span class="built_in">this</span>.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">      <span class="comment">//保存失败后的原因</span></span><br><span class="line">      <span class="built_in">this</span>.reason = reason;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">this</span>.failCallback.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.failCallback.shift()(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  then (successCallback, failCallback) &#123;</span><br><span class="line">    <span class="comment">//判断状态</span></span><br><span class="line">    <span class="keyword">if</span>  (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.status === REJECTED)&#123;</span><br><span class="line">      failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//保存成功和失败回调</span></span><br><span class="line">      <span class="built_in">this</span>.successCallback.push(successCallback);</span><br><span class="line">      <span class="built_in">this</span>.failCallback.push(failCallback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Promise-then方法的链式调用"><a href="#Promise-then方法的链式调用" class="headerlink" title="Promise then方法的链式调用"></a>Promise then方法的链式调用</h2><p>then方法返回一个Promise对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">//MyPromise状态，定义成常量，编辑器有代码提示</span></span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.successCallback = [];</span><br><span class="line">    <span class="built_in">this</span>.failCallback = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="comment">//定义成箭头函数，this的指向MyPromise对象</span></span><br><span class="line">      <span class="comment">//判断是否已经执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">      <span class="comment">//保存成功之后的值</span></span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">this</span>.successCallback.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.successCallback.shift()(<span class="built_in">this</span>.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">      <span class="comment">//保存失败后的原因</span></span><br><span class="line">      <span class="built_in">this</span>.reason = reason;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">this</span>.failCallback.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.failCallback.shift()(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  then (successCallback, failCallback) &#123;</span><br><span class="line">    <span class="keyword">let</span> x;</span><br><span class="line">    <span class="keyword">if</span>  (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.status === REJECTED)&#123;</span><br><span class="line">      failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> returnPromise;</span><br><span class="line">    <span class="keyword">if</span>(x <span class="keyword">instanceof</span> MyPromise)&#123;</span><br><span class="line">      returnPromise = x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      returnPromise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> returnPromise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">x, resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    <span class="comment">//x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ECMAScript新特性 —— ES2015(2)</title>
    <url>/2021/04/20/2021-04-20ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-2/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><h1 id="ECMAScript新特性"><a href="#ECMAScript新特性" class="headerlink" title="ECMAScript新特性"></a>ECMAScript新特性</h1><p><strong>Proxy以非侵入的方式监管了对象的读写</strong></p>
<p><strong>defineProperty是对属性单独进行监视操作，会多很多额外的操作</strong></p>
<h2 id="ES2015-箭头函数"><a href="#ES2015-箭头函数" class="headerlink" title="ES2015 箭头函数"></a>ES2015 箭头函数</h2><p> 箭头函数：出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性）</p>
<p> his的概念是：this是JavaScript的一个关键字，他是指函数执行过程中，自动生成的一个内部对象，是指当前的对象，只在当前函数内部使用。<strong>（this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this指向的是window；当函数被作为某个对象的方法调用时，this就等于那个对象）。</strong></p>
<p> <strong>箭头函数的this定义：箭头函数的this是在定义函数时绑定的，不是在执行过程中绑定的。简单的说，函数在定义时，this就继承了定义函数的对象。</strong></p>
<p> 在“use strict”严格模式下，没有直接的挂载者（或称调用者）的函数中this是指向window，这是约定俗成的。在“use strict”严格模式下，没有直接的挂载者的话，this默认为undefined。</p>
<p> 常见的window属性和方法有alter，document，parseInt，setTimeout，setInterval，location<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> inc = <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//等同于</span></span><br><span class="line"> <span class="keyword">const</span> inc = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  sayHi1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi, <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHi2: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi, <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHiAsync1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHiAsync2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> person.sayHi1()<span class="comment">//hi, tom</span></span><br><span class="line"></span><br><span class="line"> person.sayHi2()<span class="comment">//hi, undefined</span></span><br><span class="line"></span><br><span class="line"> person.sayHiAsync1()<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"> person.sayHiAsync2()<span class="comment">//tom 执行时产生this，定义箭头函数，箭头函数继承this</span></span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-对象字面量的增强"><a href="#ES2015-对象字面量的增强" class="headerlink" title="ES2015 对象字面量的增强"></a>ES2015 对象字面量的增强</h2><p> Enhanced object literals<br> 计算属性名：可以使用表达式的返回值作为属性名<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;aaa&#x27;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">123</span></span><br><span class="line">  bar: bar</span><br><span class="line">  method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1[<span class="number">1</span>+<span class="number">1</span>] = <span class="number">234</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  bar,</span><br><span class="line">  method1 () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="number">1</span> + <span class="number">1</span>]: <span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-对象扩展方法"><a href="#ES2015-对象扩展方法" class="headerlink" title="ES2015 对象扩展方法"></a>ES2015 对象扩展方法</h2><p> Object.assign<br> 将多个源对象中的属性复制到一个目标对象当中，如果有相同的属性，则覆盖<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source1 = &#123;</span><br><span class="line">  a: <span class="number">123</span>,</span><br><span class="line">  b: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source2 = &#123;</span><br><span class="line">  b: <span class="number">555</span>,</span><br><span class="line">  d: <span class="number">555</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  a: <span class="number">456</span>,</span><br><span class="line">  c: <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Object</span>.assign(target, source1, source2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//[a:123, b: 555, c: 456, d:555 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result === target)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-对象扩展方法-1"><a href="#ES2015-对象扩展方法-1" class="headerlink" title="ES2015 对象扩展方法"></a>ES2015 对象扩展方法</h2><p> Object.is<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="literal">false</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="literal">false</span>)<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>))<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-Proxy"><a href="#ES2015-Proxy" class="headerlink" title="ES2015 Proxy"></a>ES2015 Proxy</h2><p> Object.defineProperty Vue3.0之前实现方法<br> Vue3.0使用Proxy<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">  get (target, property) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, property)</span><br><span class="line">    <span class="keyword">return</span> property <span class="keyword">in</span> target?target[property]: <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  set (target, property, value) &#123;</span><br><span class="line">    <span class="keyword">if</span>(property === <span class="string">&#x27;age&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Number</span>.isInteger(value))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span> is not an int`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(personProxy.name)</span><br><span class="line"><span class="comment">//[name: &#x27;aaa&#x27;, age: 18] name</span></span><br><span class="line"><span class="comment">// aaa</span></span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-Proxy对比defineProperty"><a href="#ES2015-Proxy对比defineProperty" class="headerlink" title="ES2015 Proxy对比defineProperty"></a>ES2015 Proxy对比defineProperty</h2><p> Object.defineProperty只能监视读写操作<br> Proxy功能更强大，能监视更多操作<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, property</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, property)</span><br><span class="line">    <span class="keyword">delete</span> target[property] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> personProxy.name</span><br><span class="line"><span class="comment">//[name: &#x27;aaa&#x27;, age: 18] name</span></span><br><span class="line"><span class="comment">// aaa</span></span><br></pre></td></tr></table></figure><br><br></p>
<p>对对象的监视操作<br><img lazyload src="/images/loading.svg" data-src="2021-04-20ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-2/handler.png" alt="handler" loading="lazy"></p>
<br>

<p>对数组的监视操作<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(list, &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>, target, property)</span><br><span class="line">    target[property] = value</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//表示设置成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">listProxy.push(<span class="number">100</span>)</span><br><span class="line"><span class="comment">//set 0 100</span></span><br><span class="line"><span class="comment">// set length 1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Proxy以非侵入的方式监管了对象的读写</strong></p>
<br>

<h2 id="ES2015-Reflect"><a href="#ES2015-Reflect" class="headerlink" title="ES2015 Reflect"></a>ES2015 Reflect</h2><p> Reflect中13个方法方法：Proxy方法的默认实现<br> <strong>统一提供一套用于操作对象的API</strong><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  bar: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有定义方法等同于调用Reflect的方法</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, property)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> obj</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(obj, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-Promise"><a href="#ES2015-Promise" class="headerlink" title="ES2015 Promise"></a>ES2015 Promise</h2><p>提供全新的异步调用方案，用then解决了传统异步调用嵌套过深的问题</p>
<br>

<h2 id="ES2015-class类"><a href="#ES2015-class类" class="headerlink" title="ES2015 class类"></a>ES2015 class类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`hi, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-静态方法"><a href="#ES2015-静态方法" class="headerlink" title="ES2015 静态方法"></a>ES2015 静态方法</h2><p><strong>静态方法挂载在类上，所以静态方法中的this指向该类</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">create</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-类的继承"><a href="#ES2015-类的继承" class="headerlink" title="ES2015 类的继承"></a>ES2015 类的继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">create</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  hello () &#123;</span><br><span class="line">    <span class="built_in">super</span>.say()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my age is <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-Set"><a href="#ES2015-Set" class="headerlink" title="ES2015 Set"></a>ES2015 Set</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">s.forEach(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">console</span>.log(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.size)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.delete(<span class="number">3</span>))<span class="comment">//改变原数组</span></span><br><span class="line"></span><br><span class="line">s.clear()<span class="comment">//清空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = [...new <span class="built_in">Set</span>(arr)]</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-Map"><a href="#ES2015-Map" class="headerlink" title="ES2015 Map"></a>ES2015 Map</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只能以字符串作为键值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成字符串形式</span></span><br><span class="line">obj[<span class="literal">true</span>] = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line">obj[<span class="number">123</span>] = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line">obj[&#123;<span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>&#125;] = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))<span class="comment">//[&#x27;true&#x27;, &#x27;123&#x27;, &#x27;[object Object]&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">m.set(tom, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m)<span class="comment">//Map(1) &#123; &#123; name: &#x27;tom&#x27; &#125; =&gt; 90 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.get(tom))<span class="comment">//90</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ECMAScript新特性 —— ES2015(3)</title>
    <url>/2021/04/20/2021-04-20ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2015-3/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><p> Symbol() 每次都是唯一的值，若要用一致的变量用全局变量或者for方法，for方法会将传入的值转化为字符串</p>
<p> Symbol内部有很多常量，作为内部方法标识，可以自定义对象实现内部接口</p>
<p> 数据实现了iterator接口，才能执行for…of</p>
<p> iterator中维护了一个数据指针，next方法每执行一次，指针往后移一位</p>
<h1 id="ECMAScript新特性"><a href="#ECMAScript新特性" class="headerlink" title="ECMAScript新特性"></a>ECMAScript新特性</h1><h2 id="ES2015-Symbol"><a href="#ES2015-Symbol" class="headerlink" title="ES2015 Symbol"></a>ES2015 Symbol</h2><p><strong>全新的原始数据类型</strong> 独一无二的值<br>可以实现对象的私有属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多人开发之前可能会有重复</span></span><br><span class="line"><span class="comment">//shared.js=======================</span></span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a.js =======================</span></span><br><span class="line">cache[<span class="string">&#x27;foo&#x27;</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js =======================</span></span><br><span class="line">cache[<span class="string">&#x27;foo&#x27;</span>] = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)<span class="comment">//foo作为描述文本，可以作为对象键值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>()]: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">obj[<span class="built_in">Symbol</span>()] = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">obj[<span class="built_in">Symbol</span>()] = <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现对象的私有属性</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>[name])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-Symbol补充"><a href="#ES2015-Symbol补充" class="headerlink" title="ES2015 Symbol补充"></a>ES2015 Symbol补充</h2><p> Symbol() 每次都是唯一的值，若要用一致的变量用全局变量或者for方法，for方法会将传入的值转化为字符串<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2)<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.iterator)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.hasInstance)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>()]: <span class="string">&#x27;symbol value&#x27;</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.toStringTag]: <span class="string">&#x27;symbol string&#x27;</span>,</span><br><span class="line">  foo: <span class="string">&#x27;normal value&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.toString())<span class="comment">//[object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br></pre></td></tr></table></figure><br><br></p>
<h2 id="ES2015-for…of-循环"><a href="#ES2015-for…of-循环" class="headerlink" title="ES2015 for…of 循环"></a>ES2015 for…of 循环</h2><p> 数组的for…of类似forEach，forEach不能跳出循环，要借用some和every跳出循环，for…of可以跳出循环<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">  <span class="keyword">if</span>(item &gt; <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> s)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">m.set(<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;345&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> m)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo 123</span></span><br><span class="line"><span class="comment">//bar 345</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  bar: <span class="number">345</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//obj is not iterable</span></span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-可迭代接口"><a href="#ES2015-可迭代接口" class="headerlink" title="ES2015 可迭代接口"></a>ES2015 可迭代接口</h2><p> for…of只能执行数组解构的数据<br> iterator中维护了一个数据指针，next方法每执行一次，指针往后移一位<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//iterator 可迭代</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">i.next();<span class="comment">//&#123;value: 100, done:false &#125;</span></span><br><span class="line">i.next();<span class="comment">//&#123;value: 200, done:false &#125;</span></span><br><span class="line">i.next();<span class="comment">//&#123;value: 300, done:false &#125;</span></span><br><span class="line">i.next();<span class="comment">//&#123;value: undefined, done:true &#125;</span></span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="ES2015-实现可迭代接口"><a href="#ES2015-实现可迭代接口" class="headerlink" title="ES2015 实现可迭代接口"></a>ES2015 实现可迭代接口</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  store: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = &#123;</span><br><span class="line">          value: self.store[index],</span><br><span class="line">          done: index &gt;= self.store.length</span><br><span class="line">        &#125;</span><br><span class="line">        index ++</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-迭代器模拟"><a href="#ES2015-迭代器模拟" class="headerlink" title="ES2015 迭代器模拟"></a>ES2015 迭代器模拟</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//场景：协同开发一个任务清单应用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo = &#123;</span><br><span class="line">  life: [<span class="string">&#x27;life1&#x27;</span>, <span class="string">&#x27;life2&#x27;</span>, <span class="string">&#x27;life3&#x27;</span>],</span><br><span class="line">  learn: [<span class="string">&#x27;learn1&#x27;</span>, <span class="string">&#x27;learn2&#x27;</span>, <span class="string">&#x27;learn3&#x27;</span>],</span><br><span class="line">  work: [<span class="string">&#x27;work1&#x27;</span>, <span class="string">&#x27;work2&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [].concat(<span class="built_in">this</span>.life, <span class="built_in">this</span>.learn, <span class="built_in">this</span>.work)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> all)&#123;</span><br><span class="line">      callback(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [...this.life, ...this.learn, ...this.work]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: all[index],</span><br><span class="line">          done: index ++ &gt;= all.length</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-生成器"><a href="#ES2015-生成器" class="headerlink" title="ES2015 生成器"></a>ES2015 生成器</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.next())</span><br><span class="line"><span class="comment">//&#123;value: 100, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo = &#123;</span><br><span class="line">  life: [<span class="string">&#x27;life1&#x27;</span>, <span class="string">&#x27;life2&#x27;</span>, <span class="string">&#x27;life3&#x27;</span>],</span><br><span class="line">  learn: [<span class="string">&#x27;learn1&#x27;</span>, <span class="string">&#x27;learn2&#x27;</span>, <span class="string">&#x27;learn3&#x27;</span>],</span><br><span class="line">  work: [<span class="string">&#x27;work1&#x27;</span>, <span class="string">&#x27;work2&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> * (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [...this.life, ...this.learn, ...this.work]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> all)&#123;</span><br><span class="line">      <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2015-ES-Modules"><a href="#ES2015-ES-Modules" class="headerlink" title="ES2015 ES Modules"></a>ES2015 ES Modules</h2><p> 语言层面模块化标准</p>
]]></content>
  </entry>
  <entry>
    <title>ECMAScript新特性 —— ES2016&amp;ES2017</title>
    <url>/2021/04/20/2021-04-20ECMAScript%E6%96%B0%E7%89%B9%E6%80%A7-ES2016/</url>
    <content><![CDATA[<h4 id="文章内容输入来源：拉勾教育大前端训练营"><a href="#文章内容输入来源：拉勾教育大前端训练营" class="headerlink" title="文章内容输入来源：拉勾教育大前端训练营"></a>文章内容输入来源：拉勾教育大前端训练营</h4><p>ES2016发布了两个方法： Array.prototype.includes,指数运算**</p>
<h1 id="ECMAScript新特性"><a href="#ECMAScript新特性" class="headerlink" title="ECMAScript新特性"></a>ECMAScript新特性</h1><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><p>indexOf 不能判断NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.prototype.includes ----------------------</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>, <span class="literal">NaN</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;foo&#x27;</span>))<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;1&#x27;</span>))<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">NaN</span>))<span class="comment">//0-1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">false</span>))<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">null</span>))<span class="comment">//04</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">undefined</span>))<span class="comment">//05</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;foo&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;1&#x27;</span>))<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">NaN</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">false</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">null</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">undefined</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">  bar: <span class="string">&#x27;value2&#x27;</span>，</span><br><span class="line">  <span class="keyword">get</span> <span class="title">fullName</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.foo + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.bar</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.values -------------------------------</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj))<span class="comment">//[value1, value2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.entries ------------------------------</span></span><br><span class="line"><span class="comment">//以数组形式放回对象的键值对</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj))</span><br><span class="line"><span class="comment">//[[&#x27;foo&#x27;, &#x27;value1&#x27;], [&#x27;bar&#x27;, &#x27;value2&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo: value1,</span></span><br><span class="line"><span class="comment">// bar: value2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//借此将对象转换成map</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.getOwnPropertyDescriptors --------------</span></span><br><span class="line"><span class="comment">//对象的get和set属性 不能通过 Object。assign 拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/04/22/test/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
